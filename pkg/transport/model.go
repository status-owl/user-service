// Package transport provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package transport

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Email address
	Email string `json:"email"`

	// User name
	Name string `json:"name"`

	// Password
	Password string `json:"password"`
}

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	Id string `json:"id"`
}

// Represents an invalid property in a bad request
type InvalidParam struct {
	// Name of the property
	Name string `json:"name"`

	// Why is the property considered invalid
	Reason string `json:"reason"`
}

// Problem defines model for Problem.
type Problem struct {
	// A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.
	Detail        string          `json:"detail"`
	InvalidParams *[]InvalidParam `json:"invalid-params,omitempty"`

	// The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int32 `json:"status"`

	// A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.
	Title string `json:"title"`

	// A URI reference that uniquely identifies the problem type only in the context of the provided API. Opposed to the specification in RFC-7807, it is neither recommended to be dereferencable and point to a human-readable documentation nor globally unique for the problem type.
	Type *string `json:"type,omitempty"`
}

// User defines model for User.
type User struct {
	// Email address
	Email string `json:"email"`

	// User ID
	Id string `json:"id"`

	// User name
	Name string `json:"name"`
}

// FindUsersParams defines parameters for FindUsers.
type FindUsersParams struct {
	// User's email address
	Email string `json:"email"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody CreateUserRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody
