openapi: "3.0.3"
info:
  title: User Service
  version: 1.0.0
  license:
    name: MIT
servers:
- url: https://api.status-owl.de
paths:
  /users:
    get:
      summary: Find users with specific filter
      operationId: FindUsers
      tags:
        - users
      parameters:
        - name: email
          schema:
            type: string
          in: query
          description: User's email address
          required: true
      responses:
        '200':
          description: Successfully executed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: Errors occurred
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{id}:
    get:
      summary: Find a user
      operationId: FindUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
          allowEmptyValue: false
          example: dfg142sh1322hha
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          description: User ID
          example: dfg142sh1322hha
        name:
          type: string
          description: User name
          example: John Doe
        email:
          type: string
          description: Email address
          example: john.doe@example.com
    Problem:
      type: object
      required:
        - status
        - title
        - detail
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in the
            context of the provided API. Opposed to the specification in RFC-7807,
            it is neither recommended to be dereferencable and point to a
            human-readable documentation nor globally unique for the problem type.
          default: about:blank
          example: /problem/bad-request
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: Bad Request
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 400
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually not
            suited for non technical stakeholders and not localized.
          example: One of the parameters is invalid
        invalid-params:
          type: array
          items:
            $ref: "#/components/schemas/InvalidParam"
    InvalidParam:
      type: object
      description: Represents an invalid property in a bad request
      required:
        - name
        - reason
      properties:
        name:
          type: string
          description: Name of the property
          example: email
        reason:
          type: string
          description: Why is the property considered invalid
          example: email address must not be empty
